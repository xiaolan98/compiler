digraph tree{
"program" -> "subprogram"
"subprogram" -> "progress description"
"progress description" -> "subprogram"
"subprogram" -> "statement"
"statement" -> "compound statement"
"compound statement" -> "end"
"compound statement" -> "statement"
"statement" -> "empty"
"compound statement" -> ";"
"compound statement" -> "statement"
"statement" -> "while type loop statement"
"while type loop statement" -> ""
"" -> "compound statement"
"compound statement" -> "end"
"compound statement" -> "statement"
"statement" -> "empty"
"compound statement" -> ";"
"compound statement" -> "statement"
"statement" -> "assignment statement"
"assignment statement" -> "expression"
"expression" -> "item"
"item" -> "factor"
"factor" -> "identifier"
"assignment statement" -> ":="
"assignment statement" -> "identifier"
"compound statement" -> ";"
"compound statement" -> "statement"
"statement" -> "assignment statement"
"assignment statement" -> "expression"
"expression" -> "item"
"item" -> "factor"
"factor" -> "identifier"
"assignment statement" -> ":="
"assignment statement" -> "identifier"
"compound statement" -> ";"
"compound statement" -> "statement"
"statement" -> "assignment statement"
"assignment statement" -> "expression"
"expression" -> "item"
"item" -> "factor"
"factor" -> "identifier"
"item" -> "mul div operator"
"item" -> "factor"
"factor" -> "identifier"
"expression" -> "add sub operator"
"expression" -> "item"
"item" -> "factor"
"factor" -> "identifier"
"assignment statement" -> ":="
"assignment statement" -> "identifier"
"compound statement" -> ";"
"compound statement" -> "statement"
"statement" -> "assignment statement"
"assignment statement" -> "expression"
"expression" -> "item"
"item" -> "factor"
"factor" -> "identifier"
"item" -> "mul div operator"
"item" -> "factor"
"factor" -> "identifier"
"assignment statement" -> ":="
"assignment statement" -> "identifier"
"compound statement" -> "begin"
"while type loop statement" -> "then"
"while type loop statement" -> "condition"
"condition" -> "expression"
"expression" -> "item"
"item" -> "factor"
"factor" -> "unsigned int"
"condition" -> "relation operator"
"condition" -> "expression"
"expression" -> "item"
"item" -> "factor"
"factor" -> "identifier"
"while type loop statement" -> "while"
"compound statement" -> ";"
"compound statement" -> "statement"
"statement" -> "write statement"
"write statement" -> ")"
"write statement" -> "expression"
"expression" -> "item"
"item" -> "factor"
"factor" -> "unsigned int"
"expression" -> "add sub operator"
"expression" -> "item"
"item" -> "factor"
"factor" -> "unsigned int"
"expression" -> "add sub operator"
"expression" -> "item"
"item" -> "factor"
"factor" -> "unsigned int"
"item" -> "mul div operator"
"item" -> "factor"
"factor" -> "identifier"
"write statement" -> "("
"write statement" -> "write"
"compound statement" -> ";"
"compound statement" -> "statement"
"statement" -> "assignment statement"
"assignment statement" -> "expression"
"expression" -> "item"
"item" -> "factor"
"factor" -> "unsigned int"
"assignment statement" -> ":="
"assignment statement" -> "identifier"
"compound statement" -> "begin"
"subprogram" -> "variable description"
"variable description" -> ";"
"variable description" -> "identifier"
"variable description" -> "var"
"progress description" -> "progress head"
"progress head" -> ";"
"progress head" -> "identifier"
"progress head" -> "procedure"
"subprogram" -> "variable description"
"variable description" -> ";"
"variable description" -> "identifier"
"variable description" -> ","
"variable description" -> "identifier"
"variable description" -> ","
"variable description" -> "identifier"
"variable description" -> ","
"variable description" -> "identifier"
"variable description" -> "var"
"subprogram" -> "const description"
"const description" -> ";"
"const description" -> "const define"
"const define" -> "unsigned int"
"const define" -> "="
"const define" -> "statement"
"const description" -> "const"
}